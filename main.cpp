#include <list>
#include <tuple>
#include <vector>
#include <stdio.h>
#include "network.h"
#include "nn.h"

using std::list;
using std::vector;
using std::tuple;
using std::make_tuple;
using std::initializer_list;

void preprocess_training_examples(list<TrainingExample> &examples)
{
  vector<double> mins;
  vector<double> maxes;

  int i;
  for(TrainingExample &example : examples) {
    i = 0;
    for(double x : example.first) {
      if(mins.size() <= i) {
        mins.push_back(x);
        maxes.push_back(x);
      }
      else {
        if(x < mins[i])
          mins[i] = x;
        if(x > maxes[i])
          maxes[i] = x;
      }
      i ++;
    }
  }

  for(TrainingExample &example : examples) {
    for(i = 0; i < example.first.size(); i ++) {
      example.first[i] = (example.first[i] - mins[i]) / (maxes[i] - mins[i]);
    }
  }
}

int main(int argc, char **argv)
{
  vector<int> layer_sizes{4, 3, 3};
  Network network(layer_sizes);

  list<TrainingExample> training_examples{
    {{5.1f, 3.5, 1.4, 0.2}, {-1, -1, 1}},
    {{4.9f, 3, 1.4, 0.2}, {-1, -1, 1}},
    {{4.7f, 3.2, 1.3, 0.2}, {-1, -1, 1}},
    {{4.6f, 3.1, 1.5, 0.2}, {-1, -1, 1}},
    {{5.f, 3.6, 1.4, 0.2}, {-1, -1, 1}},
    {{5.4f, 3.9, 1.7, 0.4}, {-1, -1, 1}},
    {{4.6f, 3.4, 1.4, 0.3}, {-1, -1, 1}},
    {{5.f, 3.4, 1.5, 0.2}, {-1, -1, 1}},
    {{4.4f, 2.9, 1.4, 0.2}, {-1, -1, 1}},
    {{4.9f, 3.1, 1.5, 0.1}, {-1, -1, 1}},
    {{5.4f, 3.7, 1.5, 0.2}, {-1, -1, 1}},
    {{4.8f, 3.4, 1.6, 0.2}, {-1, -1, 1}},
    {{4.8f, 3, 1.4, 0.1}, {-1, -1, 1}},
    {{4.3f, 3, 1.1, 0.1}, {-1, -1, 1}},
    {{5.8f, 4, 1.2, 0.2}, {-1, -1, 1}},
    {{5.7f, 4.4, 1.5, 0.4}, {-1, -1, 1}},
    {{5.4f, 3.9, 1.3, 0.4}, {-1, -1, 1}},
    {{5.1f, 3.5, 1.4, 0.3}, {-1, -1, 1}},
    {{5.7f, 3.8, 1.7, 0.3}, {-1, -1, 1}},
    {{5.1f, 3.8, 1.5, 0.3}, {-1, -1, 1}},
    {{5.4f, 3.4, 1.7, 0.2}, {-1, -1, 1}},
    {{5.1f, 3.7, 1.5, 0.4}, {-1, -1, 1}},
    {{4.6f, 3.6, 1, 0.2}, {-1, -1, 1}},
    {{5.1f, 3.3, 1.7, 0.5}, {-1, -1, 1}},
    {{4.8f, 3.4, 1.9, 0.2}, {-1, -1, 1}},
    {{5.f, 3, 1.6, 0.2}, {-1, -1, 1}},
    {{5.f, 3.4, 1.6, 0.4}, {-1, -1, 1}},
    {{5.2f, 3.5, 1.5, 0.2}, {-1, -1, 1}},
    {{5.2f, 3.4, 1.4, 0.2}, {-1, -1, 1}},
    {{4.7f, 3.2, 1.6, 0.2}, {-1, -1, 1}},
    {{4.8f, 3.1, 1.6, 0.2}, {-1, -1, 1}},
    {{5.4f, 3.4, 1.5, 0.4}, {-1, -1, 1}},
    {{5.2f, 4.1, 1.5, 0.1}, {-1, -1, 1}},
    {{5.5f, 4.2, 1.4, 0.2}, {-1, -1, 1}},
    {{4.9f, 3.1, 1.5, 0.2}, {-1, -1, 1}},
    {{5.f, 3.2, 1.2, 0.2}, {-1, -1, 1}},
    {{5.5f, 3.5, 1.3, 0.2}, {-1, -1, 1}},
    {{4.9f, 3.6, 1.4, 0.1}, {-1, -1, 1}},
    {{4.4f, 3, 1.3, 0.2}, {-1, -1, 1}},
    {{5.1f, 3.4, 1.5, 0.2}, {-1, -1, 1}},
    {{5.f, 3.5, 1.3, 0.3}, {-1, -1, 1}},
    {{4.5f, 2.3, 1.3, 0.3}, {-1, -1, 1}},
    {{4.4f, 3.2, 1.3, 0.2}, {-1, -1, 1}},
    {{5.f, 3.5, 1.6, 0.6}, {-1, -1, 1}},
    {{5.1f, 3.8, 1.9, 0.4}, {-1, -1, 1}},
    {{4.8f, 3, 1.4, 0.3}, {-1, -1, 1}},
    {{5.1f, 3.8, 1.6, 0.2}, {-1, -1, 1}},
    {{4.6f, 3.2, 1.4, 0.2}, {-1, -1, 1}},
    {{5.3f, 3.7, 1.5, 0.2}, {-1, -1, 1}},
    {{5.f, 3.3, 1.4, 0.2}, {-1, -1, 1}},
    {{7.f, 3.2, 4.7, 1.4}, {-1, 1, -1}},
    {{6.4f, 3.2, 4.5, 1.5}, {-1, 1, -1}},
    {{6.9f, 3.1, 4.9, 1.5}, {-1, 1, -1}},
    {{5.5f, 2.3, 4, 1.3}, {-1, 1, -1}},
    {{6.5f, 2.8, 4.6, 1.5}, {-1, 1, -1}},
    {{5.7f, 2.8, 4.5, 1.3}, {-1, 1, -1}},
    {{6.3f, 3.3, 4.7, 1.6}, {-1, 1, -1}},
    {{4.9f, 2.4, 3.3, 1}, {-1, 1, -1}},
    {{6.6f, 2.9, 4.6, 1.3}, {-1, 1, -1}},
    {{5.2f, 2.7, 3.9, 1.4}, {-1, 1, -1}},
    {{5.f, 2, 3.5, 1}, {-1, 1, -1}},
    {{5.9f, 3, 4.2, 1.5}, {-1, 1, -1}},
    {{6.f, 2.2, 4, 1}, {-1, 1, -1}},
    {{6.1f, 2.9, 4.7, 1.4}, {-1, 1, -1}},
    {{5.6f, 2.9, 3.6, 1.3}, {-1, 1, -1}},
    {{6.7f, 3.1, 4.4, 1.4}, {-1, 1, -1}},
    {{5.6f, 3, 4.5, 1.5}, {-1, 1, -1}},
    {{5.8f, 2.7, 4.1, 1}, {-1, 1, -1}},
    {{6.2f, 2.2, 4.5, 1.5}, {-1, 1, -1}},
    {{5.6f, 2.5, 3.9, 1.1}, {-1, 1, -1}},
    {{5.9f, 3.2, 4.8, 1.8}, {-1, 1, -1}},
    {{6.1f, 2.8, 4, 1.3}, {-1, 1, -1}},
    {{6.3f, 2.5, 4.9, 1.5}, {-1, 1, -1}},
    {{6.1f, 2.8, 4.7, 1.2}, {-1, 1, -1}},
    {{6.4f, 2.9, 4.3, 1.3}, {-1, 1, -1}},
    {{6.6f, 3, 4.4, 1.4}, {-1, 1, -1}},
    {{6.8f, 2.8, 4.8, 1.4}, {-1, 1, -1}},
    {{6.7f, 3, 5, 1.7}, {-1, 1, -1}},
    {{6.f, 2.9, 4.5, 1.5}, {-1, 1, -1}},
    {{5.7f, 2.6, 3.5, 1}, {-1, 1, -1}},
    {{5.5f, 2.4, 3.8, 1.1}, {-1, 1, -1}},
    {{5.5f, 2.4, 3.7, 1}, {-1, 1, -1}},
    {{5.8f, 2.7, 3.9, 1.2}, {-1, 1, -1}},
    {{6.f, 2.7, 5.1, 1.6}, {-1, 1, -1}},
    {{5.4f, 3, 4.5, 1.5}, {-1, 1, -1}},
    {{6.f, 3.4, 4.5, 1.6}, {-1, 1, -1}},
    {{6.7f, 3.1, 4.7, 1.5}, {-1, 1, -1}},
    {{6.3f, 2.3, 4.4, 1.3}, {-1, 1, -1}},
    {{5.6f, 3, 4.1, 1.3}, {-1, 1, -1}},
    {{5.5f, 2.5, 4, 1.3}, {-1, 1, -1}},
    {{5.5f, 2.6, 4.4, 1.2}, {-1, 1, -1}},
    {{6.1f, 3, 4.6, 1.4}, {-1, 1, -1}},
    {{5.8f, 2.6, 4, 1.2}, {-1, 1, -1}},
    {{5.f, 2.3, 3.3, 1}, {-1, 1, -1}},
    {{5.6f, 2.7, 4.2, 1.3}, {-1, 1, -1}},
    {{5.7f, 3, 4.2, 1.2}, {-1, 1, -1}},
    {{5.7f, 2.9, 4.2, 1.3}, {-1, 1, -1}},
    {{6.2f, 2.9, 4.3, 1.3}, {-1, 1, -1}},
    {{5.1f, 2.5, 3, 1.1}, {-1, 1, -1}},
    {{5.7f, 2.8, 4.1, 1.3}, {-1, 1, -1}},
    {{6.3f, 3.3, 6, 2.5}, {1, -1, -1}},
    {{5.8f, 2.7, 5.1, 1.9}, {1, -1, -1}},
    {{7.1f, 3, 5.9, 2.1}, {1, -1, -1}},
    {{6.3f, 2.9, 5.6, 1.8}, {1, -1, -1}},
    {{6.5f, 3, 5.8, 2.2}, {1, -1, -1}},
    {{7.6f, 3, 6.6, 2.1}, {1, -1, -1}},
    {{4.9f, 2.5, 4.5, 1.7}, {1, -1, -1}},
    {{7.3f, 2.9, 6.3, 1.8}, {1, -1, -1}},
    {{6.7f, 2.5, 5.8, 1.8}, {1, -1, -1}},
    {{7.2f, 3.6, 6.1, 2.5}, {1, -1, -1}},
    {{6.5f, 3.2, 5.1, 2}, {1, -1, -1}},
    {{6.4f, 2.7, 5.3, 1.9}, {1, -1, -1}},
    {{6.8f, 3, 5.5, 2.1}, {1, -1, -1}},
    {{5.7f, 2.5, 5, 2}, {1, -1, -1}},
    {{5.8f, 2.8, 5.1, 2.4}, {1, -1, -1}},
    {{6.4f, 3.2, 5.3, 2.3}, {1, -1, -1}},
    {{6.5f, 3, 5.5, 1.8}, {1, -1, -1}},
    {{7.7f, 3.8, 6.7, 2.2}, {1, -1, -1}},
    {{7.7f, 2.6, 6.9, 2.3}, {1, -1, -1}},
    {{6.f, 2.2, 5, 1.5}, {1, -1, -1}},
    {{6.9f, 3.2, 5.7, 2.3}, {1, -1, -1}},
    {{5.6f, 2.8, 4.9, 2}, {1, -1, -1}},
    {{7.7f, 2.8, 6.7, 2}, {1, -1, -1}},
    {{6.3f, 2.7, 4.9, 1.8}, {1, -1, -1}},
    {{6.7f, 3.3, 5.7, 2.1}, {1, -1, -1}},
    {{7.2f, 3.2, 6, 1.8}, {1, -1, -1}},
    {{6.2f, 2.8, 4.8, 1.8}, {1, -1, -1}},
    {{6.1f, 3, 4.9, 1.8}, {1, -1, -1}},
    {{6.4f, 2.8, 5.6, 2.1}, {1, -1, -1}},
    {{7.2f, 3, 5.8, 1.6}, {1, -1, -1}},
    {{7.4f, 2.8, 6.1, 1.9}, {1, -1, -1}},
    {{7.9f, 3.8, 6.4, 2}, {1, -1, -1}},
    {{6.4f, 2.8, 5.6, 2.2}, {1, -1, -1}},
    {{6.3f, 2.8, 5.1, 1.5}, {1, -1, -1}},
    {{6.1f, 2.6, 5.6, 1.4}, {1, -1, -1}},
    {{7.7f, 3, 6.1, 2.3}, {1, -1, -1}},
    {{6.3f, 3.4, 5.6, 2.4}, {1, -1, -1}},
    {{6.4f, 3.1, 5.5, 1.8}, {1, -1, -1}},
    {{6.f, 3, 4.8, 1.8}, {1, -1, -1}},
    {{6.9f, 3.1, 5.4, 2.1}, {1, -1, -1}},
    {{6.7f, 3.1, 5.6, 2.4}, {1, -1, -1}},
    {{6.9f, 3.1, 5.1, 2.3}, {1, -1, -1}},
    {{5.8f, 2.7, 5.1, 1.9}, {1, -1, -1}},
    {{6.8f, 3.2, 5.9, 2.3}, {1, -1, -1}},
    {{6.7f, 3.3, 5.7, 2.5}, {1, -1, -1}},
    {{6.7f, 3, 5.2, 2.3}, {1, -1, -1}},
    {{6.3f, 2.5, 5, 1.9}, {1, -1, -1}},
    {{6.5f, 3, 5.2, 2}, {1, -1, -1}},
    {{6.2f, 3.4, 5.4, 2.3}, {1, -1, -1}},
    {{5.9f, 3, 5.1, 1.8}, {1, -1, -1}}
  };

  preprocess_training_examples(training_examples);

  for(TrainingExample &example : training_examples) {
    printf("[ ");
    for(double x : example.first) {
      printf("%.2f ", x);
    }
    printf(" ]\n");
  }

  network.train(training_examples, 1000);

  list<TestExample> test_examples{
    {0.08, 0.58, 0.07, 0.08},
    {0.56, 0.21, 0.68, 0.75}
  };

  for(TestExample &example : test_examples) {
    list<double> *result = network.test(example);
    printf("[ ");
    for(double x : example) {
      printf("%.2f ", x);
    }
    printf("] => ");
    printf("[ ");
    for(double x : *result) {
      printf("%.2f ", x);
    }
    printf("]\n");

    free(result);
  }
}
